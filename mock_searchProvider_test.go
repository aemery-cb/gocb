// Code generated by mockery v2.20.0. DO NOT EDIT.

package gocb

import (
	context "context"

	gocbcore "github.com/couchbase/gocbcore/v10"
	mock "github.com/stretchr/testify/mock"
)

// mockSearchProvider is an autogenerated mock type for the searchProvider type
type mockSearchProvider struct {
	mock.Mock
}

// SearchQuery provides a mock function with given fields: ctx, opts
func (_m *mockSearchProvider) SearchQuery(ctx context.Context, opts gocbcore.SearchQueryOptions) (searchRowReader, error) {
	ret := _m.Called(ctx, opts)

	var r0 searchRowReader
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, gocbcore.SearchQueryOptions) (searchRowReader, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, gocbcore.SearchQueryOptions) searchRowReader); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(searchRowReader)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, gocbcore.SearchQueryOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewMockSearchProvider interface {
	mock.TestingT
	Cleanup(func())
}

// newMockSearchProvider creates a new instance of mockSearchProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockSearchProvider(t mockConstructorTestingTnewMockSearchProvider) *mockSearchProvider {
	mock := &mockSearchProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
