// Code generated by mockery v2.20.0. DO NOT EDIT.

package gocb

import (
	search "github.com/couchbase/gocb/v2/search"
	mock "github.com/stretchr/testify/mock"
)

// mockSearchProvider is an autogenerated mock type for the searchProvider type
type mockSearchProvider struct {
	mock.Mock
}

// SearchQuery provides a mock function with given fields: indexName, query, opts
func (_m *mockSearchProvider) SearchQuery(indexName string, query search.Query, opts *SearchOptions) (*SearchResult, error) {
	ret := _m.Called(indexName, query, opts)

	var r0 *SearchResult
	var r1 error
	if rf, ok := ret.Get(0).(func(string, search.Query, *SearchOptions) (*SearchResult, error)); ok {
		return rf(indexName, query, opts)
	}
	if rf, ok := ret.Get(0).(func(string, search.Query, *SearchOptions) *SearchResult); ok {
		r0 = rf(indexName, query, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SearchResult)
		}
	}

	if rf, ok := ret.Get(1).(func(string, search.Query, *SearchOptions) error); ok {
		r1 = rf(indexName, query, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewMockSearchProvider interface {
	mock.TestingT
	Cleanup(func())
}

// newMockSearchProvider creates a new instance of mockSearchProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockSearchProvider(t mockConstructorTestingTnewMockSearchProvider) *mockSearchProvider {
	mock := &mockSearchProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
