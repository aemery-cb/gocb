// Code generated by mockery v2.26.1. DO NOT EDIT.

package gocb

import (
	context "context"

	gocbcore "github.com/couchbase/gocbcore/v10"
	mock "github.com/stretchr/testify/mock"
)

// mockQueryProvider is an autogenerated mock type for the queryProvider type
type mockQueryProvider struct {
	mock.Mock
}

// N1QLQuery provides a mock function with given fields: ctx, opts
func (_m *mockQueryProvider) N1QLQuery(ctx context.Context, opts gocbcore.N1QLQueryOptions) (queryRowReader, error) {
	ret := _m.Called(ctx, opts)

	var r0 queryRowReader
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, gocbcore.N1QLQueryOptions) (queryRowReader, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, gocbcore.N1QLQueryOptions) queryRowReader); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(queryRowReader)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, gocbcore.N1QLQueryOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PreparedN1QLQuery provides a mock function with given fields: ctx, opts
func (_m *mockQueryProvider) PreparedN1QLQuery(ctx context.Context, opts gocbcore.N1QLQueryOptions) (queryRowReader, error) {
	ret := _m.Called(ctx, opts)

	var r0 queryRowReader
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, gocbcore.N1QLQueryOptions) (queryRowReader, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, gocbcore.N1QLQueryOptions) queryRowReader); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(queryRowReader)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, gocbcore.N1QLQueryOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewMockQueryProvider interface {
	mock.TestingT
	Cleanup(func())
}

// newMockQueryProvider creates a new instance of mockQueryProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockQueryProvider(t mockConstructorTestingTnewMockQueryProvider) *mockQueryProvider {
	mock := &mockQueryProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
