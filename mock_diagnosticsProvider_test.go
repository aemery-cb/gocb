// Code generated by mockery v2.20.0. DO NOT EDIT.

package gocb

import (
	context "context"

	gocbcore "github.com/couchbase/gocbcore/v10"
	mock "github.com/stretchr/testify/mock"
)

// mockDiagnosticsProvider is an autogenerated mock type for the diagnosticsProvider type
type mockDiagnosticsProvider struct {
	mock.Mock
}

// Diagnostics provides a mock function with given fields: opts
func (_m *mockDiagnosticsProvider) Diagnostics(opts gocbcore.DiagnosticsOptions) (*gocbcore.DiagnosticInfo, error) {
	ret := _m.Called(opts)

	var r0 *gocbcore.DiagnosticInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(gocbcore.DiagnosticsOptions) (*gocbcore.DiagnosticInfo, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(gocbcore.DiagnosticsOptions) *gocbcore.DiagnosticInfo); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocbcore.DiagnosticInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(gocbcore.DiagnosticsOptions) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx, opts
func (_m *mockDiagnosticsProvider) Ping(ctx context.Context, opts gocbcore.PingOptions) (*gocbcore.PingResult, error) {
	ret := _m.Called(ctx, opts)

	var r0 *gocbcore.PingResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, gocbcore.PingOptions) (*gocbcore.PingResult, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, gocbcore.PingOptions) *gocbcore.PingResult); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocbcore.PingResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, gocbcore.PingOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewMockDiagnosticsProvider interface {
	mock.TestingT
	Cleanup(func())
}

// newMockDiagnosticsProvider creates a new instance of mockDiagnosticsProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockDiagnosticsProvider(t mockConstructorTestingTnewMockDiagnosticsProvider) *mockDiagnosticsProvider {
	mock := &mockDiagnosticsProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
